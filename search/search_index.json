{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Joseph's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Joseph Zheng</li> <li>Reviewer: Zhi Hang Yang</li> </ul>"},{"location":"tutorials/rust-setup/#rust-setup","title":"Rust Setup","text":""},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before continuing, make sure you have the following:</p> <ol> <li>A GitHub Account: If you don't have one, sign up here</li> <li>Git Installed: If not installed, click here</li> <li>Visual Studio Code (VS Code): The code editor we're going to use, install it right here</li> <li>Docker: The development container to be used, install it here</li> </ol>"},{"location":"tutorials/rust-setup/#part-1-setting-up-git-and-github-project","title":"Part 1: Setting up Git and GitHub Project","text":""},{"location":"tutorials/rust-setup/#step-1-initialize-your-git-repository","title":"Step 1: Initialize your Git Repository","text":"<p>(A) Open your terminal or command prompt (B) Create a new directory for your project</p> <p>If you want to organize your project</p> <p>If you want to organize this project in your own manner, <code>cd</code> into the desired parent's directory first.</p> <pre><code>mkdir rust-tutorial\ncd rust-tutorial\n</code></pre> <p>(C) Initialize a new Git repository using the command below:</p> <pre><code>git init\n</code></pre> <p>(D) Create a README file:</p> <pre><code>echo \"# Rust Tutorial Setup\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-creating-your-remote-repository-on-github","title":"Step 2: Creating your Remote Repository on GitHub","text":"<p>(A) Log in to your GitHub account and navigate to the Create a New Repository page. (B) Fill in the details accordingly below:</p> <ul> <li>Repository Name: <code>rust-tutorial</code></li> <li>Description: \"This is a tutorial for setting up Rust in a dev container.\"</li> <li>Visibility: Public</li> </ul> <p>(C) Do not initialize the repository with a README, .gitignore, or license. (D) Proceed to Create Repository.</p>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repo-to-github","title":"Step 3: Link your Local Repo to GitHub","text":"<p>(A) In your terminal in VS Code, enter</p> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-tutorial.git\n</code></pre> <p>Enter your GitHub username as a replacement for <code>&lt;your-username&gt;</code></p> <p>(B) Check your default branch name with the subcommand <code>git branch</code>. If it's not <code>main</code>, rename it to <code>main</code> using the command, <code>git branch -M main</code>. It's often standard to have the default primary branch name to be <code>main</code>, so let's uphold this standard.</p> <p>(C) Push the local commits to the GitHub repository:</p> <pre><code>git push --set-upstream origin main\n</code></pre> <p>What is <code>--set-upstream</code>?</p> <p><code>--set-upstream</code> is a special flag that pushes newly untracked branches onto the remote repository origin. Because utilizing branches is highly efficient and useful within workflows, it's important to understand how a programmer can fully utilize this git feature. This flag has a short form, <code>-u</code>.</p> <p>(D) In your web browser, refresh your GitHub repository to see the same commit you've made locally has now been pushed to remote. You can also use <code>git log</code> locally in VS Code to see the commit ID and message, which should match the ID of the most recent commit on your repository.</p>"},{"location":"tutorials/rust-setup/#part-2-installing-rust-configuring-dev-container","title":"Part 2: Installing Rust &amp; Configuring Dev Container","text":"<p>Per this tutorial, you're going to be installing Rust. You might be asking, why Rust? Rust is a flexible language with the benefits of memory safety at compile time, even without a garbage collection. Not only is it fast as C and C++, it also provides high-level code without sacrificing the benefits of low-level control over system resources. That's partially what makes Rust such a great language.</p>"},{"location":"tutorials/rust-setup/#what-is-a-development-dev-container","title":"What is a Development (Dev) Container?","text":"<p>A dev container is a premade development environment that makes programming consistent between multiple machines. These environments are determined by the configuration files we're about to create. Think of it as a virtual machine (VM) or a smaller computer running inside your own computer.</p>"},{"location":"tutorials/rust-setup/#step-1-configuring-dev-container","title":"Step 1: Configuring Dev Container","text":"<p>(A) There are many ways to create this configuration file that is essential to a dev container. Let's do it in the terminal. Make sure you're in your project folder, and run in the terminal:</p> <p><pre><code>mkdir .devcontainer\n</code></pre> (B) We want to put the dev container configurations inside this folder. Let's relocate into that configuration directory using:</p> <pre><code>cd .devcontainer\n</code></pre> <p>(C) You should see your local directory in your terminal change. As you've relocated into .devcontainer, let's create the dev container configuration file by running this command in the bash terminal:</p> <pre><code>touch devcontainer.json\n</code></pre> <p>or this in the powershell terminal:</p> <pre><code>echo &gt; devcontainer.json\n</code></pre> <p>(D) You should've created a .json file. Let's edit it manually - copy and paste the below code into the file:</p> devcontainer.json<pre><code>{\n  \"name\": \"Rust Tutorial\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  }\n}\n</code></pre> <p>What do these fields mean? Here are some basic descriptions:</p> <ul> <li><code>name</code>: A descriptive name for your dev container</li> <li><code>image</code>: The Docker image you use, which in this case is the latest version of a Rust environment</li> <li><code>customizations</code>: Adds useful configurations to VS Code, like the Rust extension you installed earlier. In the VS Code extensions marketplace, you can find these customizations with a keyword. Having this field in this configuration makes sure other developers have these extensions installed in their containers automatically.</li> </ul>"},{"location":"tutorials/rust-setup/#step-2-starting-the-dev-container","title":"Step 2: Starting the Dev Container","text":"<p>(A) Open up Command Palette (Ctrl+Shift+P, Shift+Cmd+P) and search for <code>Dev Containers: Reopen in Container</code> (B) After running the above operations, you should see some changes to your workspace. Parts of your terminal should be highlighted, and in the bottom left of your workspace, there should be a light-blue highlight showing that you're in a dev container</p> <p>To ensure your dev container is working properly, enter this in your terminal: <pre><code>rustc --version\n</code></pre> This will show you that you've got Rust configured in your dev container, and secondly, show the current (latest) version of Rust!</p> <p>Congratulations for making it this far! You're almost done!</p>"},{"location":"tutorials/rust-setup/#part-3-creating-your-first-rust-program","title":"Part 3: Creating your first Rust program!","text":"<p>Remember the components of Rust we've installed earlier? One useful one is Cargo, the official package manager and build system of Rust projects, dependencies, and builds. It's like the <code>pip</code> for Python, <code>npm</code> for Node.js and <code>make</code> for C/C++.</p> <p>(A) Let's create a new project within our workspace. Make sure you're in the /rust-tutorial directory. If not, <code>cd</code> into that directory. Run the following command in the terminal:</p> <pre><code>cargo new hello_rust --vcs none\n</code></pre> <p>What do these commands do?</p> <ul> <li><code>cargo</code>: The package manager and build system of Rust</li> <li><code>new</code>: Creates a new directory with necessary Rust project file, including <code>Cargo.toml</code> and <code>src</code> (You can check this in your own files)</li> <li><code>hello_rust</code>: The name of your new project directory</li> <li><code>--vcs none</code>: Stops the creation of a new <code>git</code> repo, since we've already initialized one</li> </ul> <p>Great job so far for understanding this tutorial! Just a couple more steps left!</p> <p>(B) Let's observe the Rust file we've just created!</p> <ul> <li><code>fn</code>: Represents a function in Rust</li> <li><code>main</code>: The default function name, and the first function ran in this Rust file</li> <li><code>println!()</code>: The function to print stuff onto the console for Rust</li> <li><code>Hello, world!</code>: The initialized string literal that's created when running the previous command</li> </ul> <p>Let's change the <code>Hello, world!</code> string to <code>Hello COMP423!</code> to fit our course!</p> <p>(C) What we want to do now is to compile that <code>main.rs</code> executable. To start, let's maneuver into our created project:</p> <pre><code>cd hello_rust\n</code></pre> <p>(D) Let's then run:</p> <pre><code>cargo build\n</code></pre> <p>What does <code>cargo build</code> do?</p> <p>For some much needed explanation, <code>cargo build</code> generates a compiled binary in the <code>target/debug</code> directory. It's very similar to <code>gcc</code>'s compiling system, where the command <code>gcc -c &lt;your-file&gt;.c</code> with the flag <code>-c</code> compiles a <code>.c</code> file into an <code>.o</code> object file.</p> <p>(E) For our last step, let's run our Rust file! Run this command:</p> <pre><code>cargo run\n</code></pre> <p>In your terminal, you should see <code>Hello COMP423!</code>, meaning you've successfully executed the Rust file!</p> <p>Difference between <code>build</code> and <code>run</code></p> <p><code>cargo build</code> only compiles the project and generates the binary code for that project, while <code>cargo run</code> can compile the project if necessary, and executes the binary immediately</p>"},{"location":"tutorials/rust-setup/#congrats-youve-finished-this-rust-setup-tutorial","title":"Congrats, you've finished this Rust setup tutorial!","text":"<ul> <li>Tested on Mac OS</li> <li>Tested on Windows OS</li> </ul>"}]}